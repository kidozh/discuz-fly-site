{"version":3,"file":"component---src-templates-document-index-tsx-431527ec132184510209.js","mappings":"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","sources":["webpack://discuz-fly-site/./src/components/SeoHead.tsx","webpack://discuz-fly-site/./src/templates/DocumentIndex.tsx","webpack://discuz-fly-site/./src/components/DocSidebar.tsx","webpack://discuz-fly-site/./src/components/LocalizedLink.tsx"],"sourcesContent":["import * as React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\n\ntype Props = {\n  title?: string\n  description?: string\n  lang?: string\n  pathname?: string\n}\n\nconst SeoHead: React.FC<Props> = ({ title, description = '', lang = 'en', pathname }) => {\n  const data = useStaticQuery(graphql`\n    query SiteMetaForHead {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  const siteTitle = data?.site?.siteMetadata?.title || ''\n  const siteUrl = process.env.SITE_URL || ''\n  const fullTitle = title ? `${title} | ${siteTitle}` : siteTitle\n  let url = ''\n  try {\n    if (pathname) {\n      if (siteUrl) {\n        url = new URL(pathname, siteUrl).href\n      } else {\n        // fallback to using pathname as-is when no siteUrl is configured\n        url = pathname\n      }\n    } else {\n      url = siteUrl || ''\n    }\n  } catch (e) {\n    url = pathname || siteUrl || ''\n  }\n\n  return (\n    <>\n      <html lang={lang} />\n      <title>{fullTitle}</title>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={fullTitle} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:url\" content={url} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n    </>\n  )\n}\n\nexport default SeoHead\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/Layout';\nimport LocalizedLink from '../components/LocalizedLink';\nimport SeoHead from '../components/SeoHead';\nimport DocSidebar from '../components/DocSidebar';\nimport { useTranslation } from 'gatsby-plugin-react-i18next';\n\nconst DocumentIndex = ({ data, pageContext, location }: any) => {\n  const language = pageContext?.language || 'en';\n  const { t } = useTranslation();\n  const nodes = data?.allMarkdownRemark?.nodes || [];\n  // filter nodes to only those under src/document and matching the current language\n  const filtered = nodes.filter((node: any) => {\n    const absolute = node.parent && node.parent.absolutePath\n    if (!absolute) return false\n    if (!/src\\/document\\//.test(absolute)) return false\n    // determine language for node\n    const fmLang = node.frontmatter?.language\n    const m = absolute.match(/\\.([a-z]{2})\\.md$/i)\n    const fileLang = m ? m[1] : null\n    const nodeLang = fmLang || fileLang || 'en'\n    return String(nodeLang) === String(language);\n  });\n\n  const docPrefix = pageContext?.docPrefix || process.env.DOC_PREFIX || 'doc';\n\n  // build hierarchical tree from filtered nodes\n  const docBase = (lang: string) => `/${lang}/${docPrefix}`;\n\n  function computeSlug(node: any) {\n    let slug = node.frontmatter?.slug || '';\n    if (!slug && node.parent && node.parent.absolutePath) {\n      const absolutePath = String(node.parent.absolutePath || '');\n      const parts = absolutePath.split(/src\\/document\\//i);\n      let rel = '';\n      if (Array.isArray(parts) && parts.length > 1 && parts[1]) {\n        rel = parts[1];\n      } else {\n        const last = absolutePath.split('/').pop();\n        rel = last || '';\n      }\n      rel = String(rel).replace(/\\.[a-z]{2}\\.md$/i, '').replace(/\\.md$/i, '');\n      if (rel.match(/\\/index$/i)) {\n        slug = rel.replace(/\\/index$/i, '');\n      } else {\n        slug = rel;\n      }\n      slug = slug.replace(/^\\/+|\\/+$/g, '');\n    }\n    return slug;\n  }\n\n  // tree node: { name, path, title?, children: Map }\n  const root: any = { children: new Map() };\n\n  filtered.forEach((node: any) => {\n    const slug = computeSlug(node);\n    const parts = slug === '' ? [] : slug.split('/').filter(Boolean);\n    let cursor = root;\n    parts.forEach((part: string, idx: number) => {\n      if (!cursor.children.has(part)) {\n        cursor.children.set(part, { name: part, children: new Map() });\n      }\n      cursor = cursor.children.get(part);\n      // if it's the last part, attach metadata\n      if (idx === parts.length - 1) {\n        const title = node.frontmatter?.title || node.frontmatter?.slug || part;\n        cursor.title = title;\n        cursor.excerpt = node.excerpt || null;\n        cursor.date = node.frontmatter?.date || null;\n        const path = `${docBase(language)}${slug === '' ? '' : '/' + slug}`;\n        cursor.path = path;\n      }\n    });\n    // handle index files (slug === '')\n    if (parts.length === 0) {\n      root.title = node.frontmatter?.title || t('docs.index');\n      root.path = `${docBase(language)}`;\n    }\n  });\n\n  function renderTree(node: any, prefix = ''): any {\n    const items: any[] = [];\n    if (node.title && node.path) {\n      items.push(\n        <li key={node.path} className=\"py-1\">\n          <LocalizedLink to={node.path} className=\"text-brand hover:underline\" prefetch=\"true\">{node.title}</LocalizedLink>\n        </li>\n      );\n    }\n    const children = Array.from(node.children ? node.children.values() : []);\n    children.sort((a: any, b: any) => a.name.localeCompare(b.name));\n    children.forEach((child: any) => {\n      const childKey = `${prefix}/${child.name}`;\n      const hasChildren = child.children && child.children.size > 0;\n      if (hasChildren) {\n        items.push(\n          <li key={childKey} className=\"py-1\">\n            <details>\n              <summary className=\"cursor-pointer font-medium\">{child.name}</summary>\n              <ul className=\"pl-4 mt-2\">\n                {renderTree(child, childKey)}\n              </ul>\n            </details>\n          </li>\n        );\n      } else {\n        const title = child.title || child.name;\n        const path = child.path || `${docBase(language)}/${[...childKey.split('/').filter(Boolean)].join('/')}`;\n        items.push(\n          <li key={childKey} className=\"py-1\">\n            <LocalizedLink to={path} className=\"hover:underline\" prefetch=\"true\">{title}</LocalizedLink>\n          </li>\n        );\n      }\n    });\n    return items;\n  }\n\n  return (\n    <Layout pageProps={{ language }}>\n  <SeoHead title={String(t('docs.documents_title', { language }))} lang={language} />\n      <main className=\"max-w-5xl mx-auto py-12 px-4 lg:flex lg:space-x-8\">\n        <aside className=\"w-full lg:w-1/3 mb-8 lg:mb-0\">\n          <h2 className=\"text-lg font-semibold mb-4\">{String(t('docs.documentation', { language }))}</h2>\n          <DocSidebar nodes={filtered} language={language} docPrefix={docPrefix} activePath={location?.pathname} />\n        </aside>\n        <section className=\"flex-1\">\n          <h1 className=\"text-2xl font-bold mb-4\">{root.title || String(t('docs.documents_title', { language }))}</h1>\n          <p className=\"text-sm text-gray-600\">{String(t('docs.select_prompt'))}</p>\n        </section>\n      </main>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query DocumentIndexQuery($language: String!) {\n    allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/src/document/\" } }) {\n      nodes {\n        frontmatter {\n          title\n          slug\n          language\n          date\n        }\n        excerpt(pruneLength: 140)\n        parent {\n          ... on File {\n            absolutePath\n            relativePath\n          }\n        }\n      }\n    }\n    locales: allLocale(filter: { language: { eq: $language } }) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n  }\n`;\n\nexport default DocumentIndex;\n","import React from 'react'\nimport { useTranslation } from 'gatsby-plugin-react-i18next'\nimport LocalizedLink from './LocalizedLink'\n\ntype DocSidebarProps = {\n  nodes: any[]\n  language: string\n  docPrefix: string\n  activePath?: string\n  showBack?: boolean\n}\n\nconst DocSidebar: React.FC<DocSidebarProps> = ({ nodes, language, docPrefix, activePath, showBack }) => {\n  const docBase = (lang: string) => `/${lang}/${docPrefix}`;\n  const { t } = useTranslation();\n  const indexLabel = t('docs.index', 'Index');\n  const backLabel = t('docs.back', 'Back to docs');\n  const undatedLabel = t('docs.undated', 'No date');\n\n  const dateFormatter = React.useMemo(() => {\n    try {\n      return new Intl.DateTimeFormat(language || 'en')\n    } catch (e) { return null }\n  }, [language])\n\n  const formatDate = (d: any) => {\n    try { if (!d) return undatedLabel; return dateFormatter ? dateFormatter.format(new Date(d)) : String(d) } catch (e) { return String(d) }\n  }\n\n  function computeSlug(node: any) {\n    // If caller provided a normalized `path` (from gatsby-node pageContext), derive slug from it\n    if (node && node.path && typeof node.path === 'string') {\n      let p = node.path;\n      // normalize: remove leading slashes\n      p = p.replace(/^\\/+/, '');\n      // remove leading language/docPrefix like \"en/doc/\" or \"zh/doc/\"\n      p = p.replace(new RegExp(`^[a-z]{2}\\/${docPrefix}\\/?`), '');\n      // if still prefixed by language, strip it (e.g. \"en/...\" remaining)\n      p = p.replace(/^[a-z]{2}\\//, '');\n      p = String(p).replace(/^\\/+|\\/+$/g, '');\n      return p;\n    }\n\n    let slug = node.frontmatter?.slug || '';\n    if (!slug && node.parent && node.parent.absolutePath) {\n      const absolutePath = String(node.parent.absolutePath || '');\n      const parts = absolutePath.split(/src\\/document\\//i);\n      let rel = '';\n      if (Array.isArray(parts) && parts.length > 1 && parts[1]) {\n        rel = parts[1];\n      } else {\n        const last = absolutePath.split('/').pop();\n        rel = last || '';\n      }\n      rel = String(rel).replace(/\\.[a-z]{2}\\.md$/i, '').replace(/\\.md$/i, '');\n      if (rel.match(/\\/index$/i)) {\n        slug = rel.replace(/\\/index$/i, '');\n      } else {\n        slug = rel;\n      }\n      slug = slug.replace(/^\\/+|\\/+$/g, '');\n    }\n    return slug;\n  }\n\n  const root: any = { children: new Map() };\n\n  nodes.forEach((node: any) => {\n    const slug = computeSlug(node);\n    const parts = slug === '' ? [] : slug.split('/').filter(Boolean);\n    let cursor = root;\n      parts.forEach((part: string, idx: number) => {\n      if (!cursor.children.has(part)) {\n        cursor.children.set(part, { name: part, children: new Map() });\n      }\n      cursor = cursor.children.get(part);\n      if (idx === parts.length - 1) {\n        const title = node.title || node.frontmatter?.title || node.frontmatter?.slug || part;\n        cursor.title = title;\n        cursor.excerpt = node.excerpt || null;\n        cursor.date = node.date || node.frontmatter?.date || null;\n        const path = `${docBase(language)}${slug === '' ? '' : '/' + slug}`;\n        cursor.path = path;\n      }\n    });\n    if (parts.length === 0) {\n      root.title = node.title || node.frontmatter?.title || 'Index';\n      root.path = `${docBase(language)}`;\n    }\n  });\n\n  function nodeContainsActive(node: any): boolean {\n    if (!activePath) return false;\n    const normalize = (p: any) => String(p || '').replace(/\\/+$|^\\s+|\\s+$/g, '').replace(/\\/$/, '');\n    if (node.path && normalize(node.path) === normalize(activePath)) return true;\n    const children = Array.from(node.children ? node.children.values() : []);\n    return children.some((c: any) => nodeContainsActive(c));\n  }\n\n  function renderTree(node: any, prefix = ''): any {\n    const items: any[] = [];\n    if (node.title && node.path) {\n      const normalize = (p: any) => String(p || '').replace(/\\/+$|^\\s+|\\s+$/g, '').replace(/\\/$/, '');\n      const isActive = activePath && normalize(node.path) === normalize(activePath);\n      const activeBg = isActive ? 'bg-brand/10 dark:bg-brand-700 dark:text-white ring-2 ring-brand' : '';\n      items.push(\n        <li key={node.path} className=\"py-2\">\n          <LocalizedLink\n            to={node.path}\n            className={`block p-3 border border-gray-200 rounded-md shadow-sm transform transition-transform duration-150 ease-out hover:-translate-y-0.5 hover:shadow-md ${activeBg}`}\n            prefetch=\"true\"\n          >\n            <div className={`font-medium ${isActive ? 'text-brand' : 'text-theme'}`}>{node.title}</div>\n            <div className=\"text-xs text-gray-400 mt-1\">{node.date ? formatDate(node.date) : undatedLabel}</div>\n          </LocalizedLink>\n        </li>\n      );\n    }\n    const children = Array.from(node.children ? node.children.values() : []);\n    children.sort((a: any, b: any) => {\n      const da = a.date ? new Date(a.date).getTime() : null;\n      const db = b.date ? new Date(b.date).getTime() : null;\n      if (da && db) return db - da; // newest first\n      if (da && !db) return -1;\n      if (!da && db) return 1;\n      return a.name.localeCompare(b.name);\n    });\n    children.forEach((child: any) => {\n      const childKey = `${prefix}/${child.name}`;\n      const hasChildren = child.children && child.children.size > 0;\n      if (hasChildren) {\n        const open = nodeContainsActive(child);\n        items.push(\n          <li key={childKey} className=\"py-1\">\n            <details open={open}>\n              <summary className=\"cursor-pointer font-medium\">{child.name}</summary>\n              <ul className=\"pl-4 mt-2\">\n                {renderTree(child, childKey)}\n              </ul>\n            </details>\n          </li>\n        );\n      } else {\n        const title = child.title || child.name;\n        const path = child.path || `${docBase(language)}/${[...childKey.split('/').filter(Boolean)].join('/')}`;\n        const normalize = (p: any) => String(p || '').replace(/\\/+$|^\\s+|\\s+$/g, '').replace(/\\/$/, '');\n        const isActive = activePath && normalize(path) === normalize(activePath);\n        const activeBg = isActive ? 'bg-brand/10 dark:bg-brand-700 dark:text-white ring-2 ring-brand' : '';\n        items.push(\n          <li key={childKey} className=\"py-2\">\n            <LocalizedLink\n              to={path}\n              className={`block p-3 border border-gray-200 rounded-md shadow-sm transform transition-transform duration-150 ease-out hover:-translate-y-0.5 hover:shadow-md ${activeBg}`}\n              prefetch=\"true\"\n            >\n              <div className={`${isActive ? 'text-brand font-medium' : 'font-medium'}`}>{title}</div>\n              <div className=\"text-xs text-gray-400 mt-1\">{child.date ? formatDate(child.date) : undatedLabel}</div>\n            </LocalizedLink>\n          </li>\n        );\n      }\n    });\n    return items;\n  }\n\n  return (\n    <nav>\n      <div className=\"mb-3\">\n        {showBack ? (\n          <LocalizedLink to={`/${language}/${docPrefix}/`} className=\"inline-flex items-center text-sm font-semibold text-gray-700 hover:text-brand\" prefetch=\"true\">\n            <span className=\"mr-2\">←</span>\n            <span>{backLabel}</span>\n          </LocalizedLink>\n        ) : (\n          root.path ? (\n            <LocalizedLink to={root.path} className=\"inline-flex items-center text-sm font-semibold text-gray-700 hover:text-brand\" prefetch=\"true\">\n              ← <span className=\"ml-2\">{root.title || indexLabel}</span>\n            </LocalizedLink>\n          ) : null\n        )}\n      </div>\n      <ul className=\"space-y-2\">\n        {renderTree(root)}\n      </ul>\n    </nav>\n  );\n}\n\nexport default DocSidebar;\n","import React from 'react'\nimport { Link } from 'gatsby-plugin-react-i18next'\n\nconst LocalizedLink: React.FC<any> = (props) => {\n  // Simple wrapper to centralize future link logic and keep usage ergonomic\n  return <Link {...props} />\n}\n\nexport default LocalizedLink\n"],"names":["_ref","_data$site","_data$site$siteMetada","title","description","lang","pathname","data","useStaticQuery","siteTitle","site","siteMetadata","siteUrl","process","SITE_URL","fullTitle","url","URL","href","e","React","name","content","property","_data$allMarkdownRema","pageContext","location","language","t","useTranslation","filtered","allMarkdownRemark","nodes","filter","node","_node$frontmatter","absolute","parent","absolutePath","test","fmLang","frontmatter","m","match","fileLang","String","docPrefix","DOC_PREFIX","docBase","root","children","Map","forEach","slug","_node$frontmatter2","parts","split","rel","Array","isArray","length","pop","replace","computeSlug","Boolean","cursor","_node$frontmatter6","part","idx","has","set","get","_node$frontmatter3","_node$frontmatter4","_node$frontmatter5","excerpt","date","path","Layout","pageProps","SeoHead","className","DocSidebar","activePath","showBack","indexLabel","backLabel","undatedLabel","dateFormatter","Intl","DateTimeFormat","formatDate","d","format","Date","nodeContainsActive","normalize","p","from","values","some","c","RegExp","LocalizedLink","to","prefetch","renderTree","prefix","items","isActive","activeBg","push","key","sort","a","b","da","getTime","db","localeCompare","child","childKey","size","open","_toConsumableArray","join","props","Link"],"sourceRoot":""}