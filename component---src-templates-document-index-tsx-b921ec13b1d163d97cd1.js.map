{"version":3,"file":"component---src-templates-document-index-tsx-b921ec13b1d163d97cd1.js","mappings":"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","sources":["webpack://discuz-fly-site/./src/components/SeoHead.tsx","webpack://discuz-fly-site/./src/components/DocSidebar.tsx","webpack://discuz-fly-site/./src/templates/DocumentIndex.tsx"],"sourcesContent":["import * as React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\n\ntype Props = {\n  title?: string\n  description?: string\n  lang?: string\n  pathname?: string\n}\n\nconst SeoHead: React.FC<Props> = ({ title, description = '', lang = 'en', pathname }) => {\n  const data = useStaticQuery(graphql`\n    query SiteMetaForHead {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  const siteTitle = data?.site?.siteMetadata?.title || ''\n  const siteUrl = process.env.SITE_URL || ''\n  const fullTitle = title ? `${title} | ${siteTitle}` : siteTitle\n  let url = ''\n  try {\n    if (pathname) {\n      if (siteUrl) {\n        url = new URL(pathname, siteUrl).href\n      } else {\n        // fallback to using pathname as-is when no siteUrl is configured\n        url = pathname\n      }\n    } else {\n      url = siteUrl || ''\n    }\n  } catch (e) {\n    url = pathname || siteUrl || ''\n  }\n\n  return (\n    <>\n      <html lang={lang} />\n      <title>{fullTitle}</title>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={fullTitle} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:url\" content={url} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n    </>\n  )\n}\n\nexport default SeoHead\n","import React from 'react'\nimport { useTranslation } from 'gatsby-plugin-react-i18next'\n\ntype DocSidebarProps = {\n  nodes: any[]\n  language: string\n  docPrefix: string\n  activePath?: string\n  showBack?: boolean\n}\n\nconst DocSidebar: React.FC<DocSidebarProps> = ({ nodes, language, docPrefix, activePath, showBack }) => {\n  const docBase = (lang: string) => `/${lang}/${docPrefix}`;\n  const { t } = useTranslation();\n  const indexLabel = t('docs.index', 'Index');\n  const backLabel = t('docs.back', 'Back to docs');\n  const undatedLabel = t('docs.undated', 'No date');\n\n  function computeSlug(node: any) {\n    // If caller provided a normalized `path` (from gatsby-node pageContext), derive slug from it\n    if (node && node.path && typeof node.path === 'string') {\n      let p = node.path;\n      // normalize: remove leading slashes\n      p = p.replace(/^\\/+/, '');\n      // remove leading language/docPrefix like \"en/doc/\" or \"zh/doc/\"\n      p = p.replace(new RegExp(`^[a-z]{2}\\/${docPrefix}\\/?`), '');\n      // if still prefixed by language, strip it (e.g. \"en/...\" remaining)\n      p = p.replace(/^[a-z]{2}\\//, '');\n      p = String(p).replace(/^\\/+|\\/+$/g, '');\n      return p;\n    }\n\n    let slug = node.frontmatter?.slug || '';\n    if (!slug && node.parent && node.parent.absolutePath) {\n      const absolutePath = String(node.parent.absolutePath || '');\n      const parts = absolutePath.split(/src\\/document\\//i);\n      let rel = '';\n      if (Array.isArray(parts) && parts.length > 1 && parts[1]) {\n        rel = parts[1];\n      } else {\n        const last = absolutePath.split('/').pop();\n        rel = last || '';\n      }\n      rel = String(rel).replace(/\\.[a-z]{2}\\.md$/i, '').replace(/\\.md$/i, '');\n      if (rel.match(/\\/index$/i)) {\n        slug = rel.replace(/\\/index$/i, '');\n      } else {\n        slug = rel;\n      }\n      slug = slug.replace(/^\\/+|\\/+$/g, '');\n    }\n    return slug;\n  }\n\n  const root: any = { children: new Map() };\n\n  nodes.forEach((node: any) => {\n    const slug = computeSlug(node);\n    const parts = slug === '' ? [] : slug.split('/').filter(Boolean);\n    let cursor = root;\n      parts.forEach((part: string, idx: number) => {\n      if (!cursor.children.has(part)) {\n        cursor.children.set(part, { name: part, children: new Map() });\n      }\n      cursor = cursor.children.get(part);\n      if (idx === parts.length - 1) {\n        const title = node.title || node.frontmatter?.title || node.frontmatter?.slug || part;\n        cursor.title = title;\n        cursor.excerpt = node.excerpt || null;\n        cursor.date = node.date || node.frontmatter?.date || null;\n        const path = `${docBase(language)}${slug === '' ? '' : '/' + slug}`;\n        cursor.path = path;\n      }\n    });\n    if (parts.length === 0) {\n      root.title = node.title || node.frontmatter?.title || 'Index';\n      root.path = `${docBase(language)}`;\n    }\n  });\n\n  function nodeContainsActive(node: any): boolean {\n    if (!activePath) return false;\n    const normalize = (p: any) => String(p || '').replace(/\\/+$|^\\s+|\\s+$/g, '').replace(/\\/$/, '');\n    if (node.path && normalize(node.path) === normalize(activePath)) return true;\n    const children = Array.from(node.children ? node.children.values() : []);\n    return children.some((c: any) => nodeContainsActive(c));\n  }\n\n  function renderTree(node: any, prefix = ''): any {\n    const items: any[] = [];\n    if (node.title && node.path) {\n      const normalize = (p: any) => String(p || '').replace(/\\/+$|^\\s+|\\s+$/g, '').replace(/\\/$/, '');\n      const isActive = activePath && normalize(node.path) === normalize(activePath);\n      const activeBg = isActive ? 'bg-brand/10 dark:bg-brand-700 dark:text-white ring-2 ring-brand' : '';\n      items.push(\n        <li key={node.path} className=\"py-2\">\n          <a\n            href={node.path}\n            className={`block p-3 border border-gray-200 rounded-md shadow-sm transform transition-transform duration-150 ease-out hover:-translate-y-0.5 hover:shadow-md ${activeBg}`}\n          >\n            <div className={`font-medium ${isActive ? 'text-brand' : 'text-theme'}`}>{node.title}</div>\n            <div className=\"text-xs text-gray-400 mt-1\">{node.date ? new Date(node.date).toLocaleDateString() : undatedLabel}</div>\n          </a>\n        </li>\n      );\n    }\n    const children = Array.from(node.children ? node.children.values() : []);\n    children.sort((a: any, b: any) => {\n      const da = a.date ? new Date(a.date).getTime() : null;\n      const db = b.date ? new Date(b.date).getTime() : null;\n      if (da && db) return db - da; // newest first\n      if (da && !db) return -1;\n      if (!da && db) return 1;\n      return a.name.localeCompare(b.name);\n    });\n    children.forEach((child: any) => {\n      const childKey = `${prefix}/${child.name}`;\n      const hasChildren = child.children && child.children.size > 0;\n      if (hasChildren) {\n        const open = nodeContainsActive(child);\n        items.push(\n          <li key={childKey} className=\"py-1\">\n            <details open={open}>\n              <summary className=\"cursor-pointer font-medium\">{child.name}</summary>\n              <ul className=\"pl-4 mt-2\">\n                {renderTree(child, childKey)}\n              </ul>\n            </details>\n          </li>\n        );\n      } else {\n        const title = child.title || child.name;\n        const path = child.path || `${docBase(language)}/${[...childKey.split('/').filter(Boolean)].join('/')}`;\n        const normalize = (p: any) => String(p || '').replace(/\\/+$|^\\s+|\\s+$/g, '').replace(/\\/$/, '');\n        const isActive = activePath && normalize(path) === normalize(activePath);\n        const activeBg = isActive ? 'bg-brand/10 dark:bg-brand-700 dark:text-white ring-2 ring-brand' : '';\n        items.push(\n          <li key={childKey} className=\"py-2\">\n            <a\n              href={path}\n              className={`block p-3 border border-gray-200 rounded-md shadow-sm transform transition-transform duration-150 ease-out hover:-translate-y-0.5 hover:shadow-md ${activeBg}`}\n            >\n              <div className={`${isActive ? 'text-brand font-medium' : 'font-medium'}`}>{title}</div>\n              <div className=\"text-xs text-gray-400 mt-1\">{child.date ? new Date(child.date).toLocaleDateString() : undatedLabel}</div>\n            </a>\n          </li>\n        );\n      }\n    });\n    return items;\n  }\n\n  return (\n    <nav>\n      <div className=\"mb-3\">\n        {showBack ? (\n          <a href={`/${language}/${docPrefix}/`} className=\"inline-flex items-center text-sm font-semibold text-gray-700 hover:text-brand\">\n            <span className=\"mr-2\">←</span>\n            <span>{backLabel}</span>\n          </a>\n        ) : (\n          root.path ? (\n            <a href={root.path} className=\"inline-flex items-center text-sm font-semibold text-gray-700 hover:text-brand\">\n              ← <span className=\"ml-2\">{root.title || indexLabel}</span>\n            </a>\n          ) : null\n        )}\n      </div>\n      <ul className=\"space-y-2\">\n        {renderTree(root)}\n      </ul>\n    </nav>\n  );\n}\n\nexport default DocSidebar;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/Layout';\nimport SeoHead from '../components/SeoHead';\nimport DocSidebar from '../components/DocSidebar';\nimport { useTranslation } from 'gatsby-plugin-react-i18next';\n\nconst DocumentIndex = ({ data, pageContext, location }: any) => {\n  const language = pageContext?.language || 'en';\n  const { t } = useTranslation();\n  const nodes = data?.allMarkdownRemark?.nodes || [];\n  // filter nodes to only those under src/document and matching the current language\n  const filtered = nodes.filter((node: any) => {\n    const absolute = node.parent && node.parent.absolutePath\n    if (!absolute) return false\n    if (!/src\\/document\\//.test(absolute)) return false\n    // determine language for node\n    const fmLang = node.frontmatter?.language\n    const m = absolute.match(/\\.([a-z]{2})\\.md$/i)\n    const fileLang = m ? m[1] : null\n    const nodeLang = fmLang || fileLang || 'en'\n    return String(nodeLang) === String(language);\n  });\n\n  const docPrefix = pageContext?.docPrefix || process.env.DOC_PREFIX || 'doc';\n\n  // build hierarchical tree from filtered nodes\n  const docBase = (lang: string) => `/${lang}/${docPrefix}`;\n\n  function computeSlug(node: any) {\n    let slug = node.frontmatter?.slug || '';\n    if (!slug && node.parent && node.parent.absolutePath) {\n      const absolutePath = String(node.parent.absolutePath || '');\n      const parts = absolutePath.split(/src\\/document\\//i);\n      let rel = '';\n      if (Array.isArray(parts) && parts.length > 1 && parts[1]) {\n        rel = parts[1];\n      } else {\n        const last = absolutePath.split('/').pop();\n        rel = last || '';\n      }\n      rel = String(rel).replace(/\\.[a-z]{2}\\.md$/i, '').replace(/\\.md$/i, '');\n      if (rel.match(/\\/index$/i)) {\n        slug = rel.replace(/\\/index$/i, '');\n      } else {\n        slug = rel;\n      }\n      slug = slug.replace(/^\\/+|\\/+$/g, '');\n    }\n    return slug;\n  }\n\n  // tree node: { name, path, title?, children: Map }\n  const root: any = { children: new Map() };\n\n  filtered.forEach((node: any) => {\n    const slug = computeSlug(node);\n    const parts = slug === '' ? [] : slug.split('/').filter(Boolean);\n    let cursor = root;\n    parts.forEach((part: string, idx: number) => {\n      if (!cursor.children.has(part)) {\n        cursor.children.set(part, { name: part, children: new Map() });\n      }\n      cursor = cursor.children.get(part);\n      // if it's the last part, attach metadata\n      if (idx === parts.length - 1) {\n        const title = node.frontmatter?.title || node.frontmatter?.slug || part;\n        cursor.title = title;\n        cursor.excerpt = node.excerpt || null;\n        cursor.date = node.frontmatter?.date || null;\n        const path = `${docBase(language)}${slug === '' ? '' : '/' + slug}`;\n        cursor.path = path;\n      }\n    });\n    // handle index files (slug === '')\n    if (parts.length === 0) {\n      root.title = node.frontmatter?.title || t('docs.index');\n      root.path = `${docBase(language)}`;\n    }\n  });\n\n  function renderTree(node: any, prefix = ''): any {\n    const items: any[] = [];\n    if (node.title && node.path) {\n      items.push(\n        <li key={node.path} className=\"py-1\">\n          <a href={node.path} className=\"text-brand hover:underline\">{node.title}</a>\n        </li>\n      );\n    }\n    const children = Array.from(node.children ? node.children.values() : []);\n    children.sort((a: any, b: any) => a.name.localeCompare(b.name));\n    children.forEach((child: any) => {\n      const childKey = `${prefix}/${child.name}`;\n      const hasChildren = child.children && child.children.size > 0;\n      if (hasChildren) {\n        items.push(\n          <li key={childKey} className=\"py-1\">\n            <details>\n              <summary className=\"cursor-pointer font-medium\">{child.name}</summary>\n              <ul className=\"pl-4 mt-2\">\n                {renderTree(child, childKey)}\n              </ul>\n            </details>\n          </li>\n        );\n      } else {\n        const title = child.title || child.name;\n        const path = child.path || `${docBase(language)}/${[...childKey.split('/').filter(Boolean)].join('/')}`;\n        items.push(\n          <li key={childKey} className=\"py-1\">\n            <a href={path} className=\"hover:underline\">{title}</a>\n          </li>\n        );\n      }\n    });\n    return items;\n  }\n\n  return (\n    <Layout pageProps={{ language }}>\n  <SeoHead title={String(t('docs.documents_title', { language }))} lang={language} />\n      <main className=\"max-w-5xl mx-auto py-12 px-4 lg:flex lg:space-x-8\">\n        <aside className=\"w-full lg:w-1/3 mb-8 lg:mb-0\">\n          <h2 className=\"text-lg font-semibold mb-4\">{String(t('docs.documentation', { language }))}</h2>\n          <DocSidebar nodes={filtered} language={language} docPrefix={docPrefix} activePath={location?.pathname} />\n        </aside>\n        <section className=\"flex-1\">\n          <h1 className=\"text-2xl font-bold mb-4\">{root.title || String(t('docs.documents_title', { language }))}</h1>\n          <p className=\"text-sm text-gray-600\">{String(t('docs.select_prompt'))}</p>\n        </section>\n      </main>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query DocumentIndexQuery($language: String!) {\n    allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/src/document/\" } }) {\n      nodes {\n        frontmatter {\n          title\n          slug\n          language\n          date\n        }\n        excerpt(pruneLength: 140)\n        parent {\n          ... on File {\n            absolutePath\n            relativePath\n          }\n        }\n      }\n    }\n    locales: allLocale(filter: { language: { eq: $language } }) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n  }\n`;\n\nexport default DocumentIndex;\n"],"names":["_ref","_data$site","_data$site$siteMetada","title","description","lang","pathname","data","useStaticQuery","siteTitle","site","siteMetadata","siteUrl","process","SITE_URL","fullTitle","url","URL","href","e","React","name","content","property","nodes","language","docPrefix","activePath","showBack","docBase","t","useTranslation","indexLabel","backLabel","undatedLabel","root","children","Map","nodeContainsActive","node","normalize","p","String","replace","path","Array","from","values","some","c","forEach","slug","_node$frontmatter","RegExp","frontmatter","parent","absolutePath","parts","split","rel","isArray","length","pop","match","computeSlug","filter","Boolean","cursor","_node$frontmatter5","part","idx","has","set","get","_node$frontmatter2","_node$frontmatter3","_node$frontmatter4","excerpt","date","className","renderTree","prefix","items","isActive","activeBg","push","key","Date","toLocaleDateString","sort","a","b","da","getTime","db","localeCompare","child","childKey","size","open","_toConsumableArray","join","_data$allMarkdownRema","pageContext","location","filtered","allMarkdownRemark","absolute","test","fmLang","m","fileLang","DOC_PREFIX","_node$frontmatter6","Layout","pageProps","SeoHead","DocSidebar"],"sourceRoot":""}