{"version":3,"file":"component---src-pages-404-tsx-4274feb0c369cd34ef07.js","mappings":"sNAkCA,UA3B0CA,KACxC,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,kBACd,OACEC,EAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,cAAA,QAAME,UAAU,oEAChBF,EAAAA,cAAA,MAAIE,UAAU,yCAAyCJ,EAAE,gBACzDE,EAAAA,cAAA,KAAGE,UAAU,SACVJ,EAAE,eACHE,EAAAA,cAAA,WASI,KACJA,EAAAA,cAAA,WACNA,EAAAA,cAACG,EAAAA,KAAI,CAACC,GAAG,IAAIF,UAAU,8BAA8BJ,EAAE,gBAAsB,QAUxE,MAAMO,EAA2BC,IAAU,IAAAC,EAChD,MACMC,GAA0B,QAAfD,EADAD,EACIG,mBAAW,IAAAF,OAAA,EAAfA,EAAiBG,OAAQ,CAAC,EACrCC,EAAOH,EAASI,UAAY,KAE5BC,GAAQL,aAAQ,EAARA,EAAUK,QAAS,YACjC,OAAOb,EAAAA,cAACc,EAAAA,EAAO,CAACD,MAAOA,EAAOF,KAAMA,I,+CCYtC,IA5CiCI,IAAyD,IAADC,EAAAC,EAAA,IAAvD,MAAEJ,EAAK,YAAEK,EAAc,GAAE,KAAEP,EAAO,KAAI,SAAEQ,GAAUJ,EAClF,MAAMK,GAAOC,EAAAA,EAAAA,gBAAe,cAUtBC,GAAYF,SAAU,QAANJ,EAAJI,EAAMG,YAAI,IAAAP,GAAc,QAAdC,EAAVD,EAAYQ,oBAAY,IAAAP,OAApB,EAAJA,EAA0BJ,QAAS,GAC/CY,EAAUC,CAAAA,EAAYC,UAAY,GAClCC,EAAYf,EAAWA,EAAK,MAAMS,EAAcA,EACtD,IAAIO,EAAM,GACV,IAGMA,EAFAV,EACEM,EACI,IAAIK,IAAIX,EAAUM,GAASM,KAG3BZ,EAGFM,GAAW,EAErB,CAAE,MAAOO,GACPH,EAAMV,GAAYM,GAAW,EAC/B,CAEA,OACEzB,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,QAAMW,KAAMA,IACZX,EAAAA,cAAA,aAAQ4B,GACR5B,EAAAA,cAAA,QAAMiC,KAAK,cAAcC,QAAShB,IAClClB,EAAAA,cAAA,QAAMmC,SAAS,WAAWD,QAASN,IACnC5B,EAAAA,cAAA,QAAMmC,SAAS,iBAAiBD,QAAShB,IACzClB,EAAAA,cAAA,QAAMmC,SAAS,UAAUD,QAAQ,YACjClC,EAAAA,cAAA,QAAMmC,SAAS,SAASD,QAASL,IACjC7B,EAAAA,cAAA,QAAMiC,KAAK,eAAeC,QAAQ,a","sources":["webpack://discuz-fly-site/./src/pages/404.tsx","webpack://discuz-fly-site/./src/components/SeoHead.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Link, HeadFC, PageProps, graphql } from \"gatsby\"\nimport SeoHead from '../components/SeoHead'\nimport { useTranslation } from 'gatsby-plugin-react-i18next'\nimport Navbar from '../components/Navbar'\nimport Layout from \"../components/Layout\"\n\nconst NotFoundPage: React.FC<PageProps> = () => {\n  const { t } = useTranslation()\n  return (\n    <Layout>\n      <main className=\"min-h-screen font-sans bg-theme text-theme transition-colors p-6\">\n      <h1 className=\"text-4xl font-semibold mb-16 max-w-xs\">{t('404_heading')}</h1>\n      <p className=\"mb-12\">\n        {t('404_message')}\n        <br />\n        {process.env.NODE_ENV === \"development\" ? (\n          <>\n            <br />\n            <span>\n              {t('404_dev_hint_prefix')} <code className=\"text-amber-700 bg-amber-100 px-1 rounded\">src/pages/</code>\n            </span>\n            <br />\n          </>\n        ) : null}\n        <br />\n  <Link to=\"/\" className=\"text-brand hover:underline\">{t('404_go_home')}</Link>.\n      </p>\n    </main>\n    </Layout>\n    \n  )\n}\n\nexport default NotFoundPage\n\nexport const Head: HeadFC<PageProps> = (props) => {\n  const ctx: any = props as any\n  const pageI18n = ctx.pageContext?.i18n || {}\n  const lang = pageI18n.language || 'en'\n  // pageContext should have localized strings provided by plugin nodes; fallback to static\n  const title = pageI18n?.title || 'Not Found'\n  return <SeoHead title={title} lang={lang} />\n}\n\n\nexport const query = graphql`\n  query ($language: String!) {\n    locales: allLocale(filter: {language: {eq: $language}}) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n  }\n`;","import * as React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\n\ntype Props = {\n  title?: string\n  description?: string\n  lang?: string\n  pathname?: string\n}\n\nconst SeoHead: React.FC<Props> = ({ title, description = '', lang = 'en', pathname }) => {\n  const data = useStaticQuery(graphql`\n    query SiteMetaForHead {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  const siteTitle = data?.site?.siteMetadata?.title || ''\n  const siteUrl = process.env.SITE_URL || ''\n  const fullTitle = title ? `${title} | ${siteTitle}` : siteTitle\n  let url = ''\n  try {\n    if (pathname) {\n      if (siteUrl) {\n        url = new URL(pathname, siteUrl).href\n      } else {\n        // fallback to using pathname as-is when no siteUrl is configured\n        url = pathname\n      }\n    } else {\n      url = siteUrl || ''\n    }\n  } catch (e) {\n    url = pathname || siteUrl || ''\n  }\n\n  return (\n    <>\n      <html lang={lang} />\n      <title>{fullTitle}</title>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={fullTitle} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:url\" content={url} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n    </>\n  )\n}\n\nexport default SeoHead\n"],"names":["NotFoundPage","t","useTranslation","React","Layout","className","Link","to","Head","props","_ctx$pageContext","pageI18n","pageContext","i18n","lang","language","title","SeoHead","_ref","_data$site","_data$site$siteMetada","description","pathname","data","useStaticQuery","siteTitle","site","siteMetadata","siteUrl","process","SITE_URL","fullTitle","url","URL","href","e","name","content","property"],"sourceRoot":""}