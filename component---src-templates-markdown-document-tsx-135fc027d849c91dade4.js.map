{"version":3,"file":"component---src-templates-markdown-document-tsx-135fc027d849c91dade4.js","mappings":"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","sources":["webpack://discuz-fly-site/./src/templates/MarkdownDocument.tsx","webpack://discuz-fly-site/./src/components/SeoHead.tsx","webpack://discuz-fly-site/./src/components/DocSidebar.tsx"],"sourcesContent":["import React, { useEffect } from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/Layout'\nimport SeoHead from '../components/SeoHead'\nimport { useTranslation } from 'gatsby-plugin-react-i18next'\nimport DocSidebar from '../components/DocSidebar'\n\ntype Props = {\n  data: any\n  pageContext: any\n  location?: any\n}\n\nconst MarkdownDocument: React.FC<Props> = ({ data, pageContext, location }) => {\n  // graphql query for the markdown node can fail if transformer isn't present\n  // so we accept html/title passed through pageContext when available.\n  const html = pageContext && pageContext.html ? pageContext.html : (data && data.markdownRemark && data.markdownRemark.html);\n  // compute title with fallbacks: frontmatter -> pageContext.title -> first H1 from html -> filename\n  const fmTitle = data && data.markdownRemark && data.markdownRemark.frontmatter && data.markdownRemark.frontmatter.title\n  let title = pageContext && pageContext.title ? pageContext.title : fmTitle\n  if (!title && html) {\n    // extract first H1 from rendered HTML\n    try {\n      const m = html.match(/<h1[^>]*>(.*?)<\\/h1>/i)\n      if (m && m[1]) {\n        title = m[1].replace(/<[^>]+>/g, '').trim()\n      }\n    } catch (e) {}\n  }\n  if (!title && pageContext?.slug) {\n    const parts = String(pageContext.slug).split('/').filter(Boolean)\n    title = parts.length ? parts[parts.length - 1] : pageContext.slug\n  }\n  // pageContext.language will be set by createPages\n  // Ensure i18n is initialized and set to the page language on the client.\n  const { i18n } = useTranslation();\n  useEffect(() => {\n    const langFromContext = pageContext?.i18n?.language || pageContext?.language;\n    if (langFromContext && i18n && i18n.language !== langFromContext) {\n      try { i18n.changeLanguage(langFromContext); } catch (e) {}\n    }\n  }, [pageContext?.i18n?.language, pageContext?.language, i18n]);\n  // Build sidebar nodes from pageContext.docPages (written by gatsby-node)\n  const nodes = React.useMemo(() => {\n    const list = pageContext?.docPages || []\n    const lang = pageContext?.i18n?.language || pageContext?.language || 'en'\n    return list.filter((p: any) => String(p.language) === String(lang)).map((p: any) => ({ id: p.id, path: p.path, title: p.title || p.id, date: p.date || null }))\n  }, [pageContext])\n\n  const activePath = (location && location.pathname) || pageContext?.i18n?.originalPath || pageContext?.path || pageContext?.slug\n\n  return (\n    <Layout pageProps={{ pageContext }}>\n      <SeoHead title={title || undefined} lang={pageContext?.i18n?.language || pageContext?.language} pathname={activePath} />\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 max-w-6xl mx-auto py-12 px-4\">\n        <aside className=\"hidden md:block\">\n          <DocSidebar nodes={nodes} language={pageContext?.i18n?.language || pageContext?.language} docPrefix={pageContext?.docPrefix || 'doc'} activePath={activePath} showBack />\n        </aside>\n        <main className=\"md:col-span-3\">\n          {title ? <h1 className=\"text-2xl font-bold mb-6\">{title}</h1> : null}\n          <article className=\"prose lg:prose-lg dark:prose-invert\" dangerouslySetInnerHTML={{ __html: html || '' }}>\n          </article>\n        </main>\n      </div>\n    </Layout>\n  )\n}\n\n\n\nexport default MarkdownDocument\n\nexport const query = graphql`\n  query MarkdownDocumentQuery($id: String!, $language: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        title\n        slug\n        language\n      }\n    }\n    locales: allLocale(filter: { language: { eq: $language } }) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n  }\n`\n","import * as React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\n\ntype Props = {\n  title?: string\n  description?: string\n  lang?: string\n  pathname?: string\n}\n\nconst SeoHead: React.FC<Props> = ({ title, description = '', lang = 'en', pathname }) => {\n  const data = useStaticQuery(graphql`\n    query SiteMetaForHead {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  const siteTitle = data?.site?.siteMetadata?.title || ''\n  const siteUrl = process.env.SITE_URL || ''\n  const fullTitle = title ? `${title} | ${siteTitle}` : siteTitle\n  let url = ''\n  try {\n    if (pathname) {\n      if (siteUrl) {\n        url = new URL(pathname, siteUrl).href\n      } else {\n        // fallback to using pathname as-is when no siteUrl is configured\n        url = pathname\n      }\n    } else {\n      url = siteUrl || ''\n    }\n  } catch (e) {\n    url = pathname || siteUrl || ''\n  }\n\n  return (\n    <>\n      <html lang={lang} />\n      <title>{fullTitle}</title>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={fullTitle} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:url\" content={url} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n    </>\n  )\n}\n\nexport default SeoHead\n","import React from 'react'\nimport { useTranslation } from 'gatsby-plugin-react-i18next'\n\ntype DocSidebarProps = {\n  nodes: any[]\n  language: string\n  docPrefix: string\n  activePath?: string\n  showBack?: boolean\n}\n\nconst DocSidebar: React.FC<DocSidebarProps> = ({ nodes, language, docPrefix, activePath, showBack }) => {\n  const docBase = (lang: string) => `/${lang}/${docPrefix}`;\n  const { t } = useTranslation();\n  const indexLabel = t('docs.index', 'Index');\n  const backLabel = t('docs.back', 'Back to docs');\n  const undatedLabel = t('docs.undated', 'No date');\n\n  function computeSlug(node: any) {\n    // If caller provided a normalized `path` (from gatsby-node pageContext), derive slug from it\n    if (node && node.path && typeof node.path === 'string') {\n      let p = node.path;\n      // normalize: remove leading slashes\n      p = p.replace(/^\\/+/, '');\n      // remove leading language/docPrefix like \"en/doc/\" or \"zh/doc/\"\n      p = p.replace(new RegExp(`^[a-z]{2}\\/${docPrefix}\\/?`), '');\n      // if still prefixed by language, strip it (e.g. \"en/...\" remaining)\n      p = p.replace(/^[a-z]{2}\\//, '');\n      p = String(p).replace(/^\\/+|\\/+$/g, '');\n      return p;\n    }\n\n    let slug = node.frontmatter?.slug || '';\n    if (!slug && node.parent && node.parent.absolutePath) {\n      const absolutePath = String(node.parent.absolutePath || '');\n      const parts = absolutePath.split(/src\\/document\\//i);\n      let rel = '';\n      if (Array.isArray(parts) && parts.length > 1 && parts[1]) {\n        rel = parts[1];\n      } else {\n        const last = absolutePath.split('/').pop();\n        rel = last || '';\n      }\n      rel = String(rel).replace(/\\.[a-z]{2}\\.md$/i, '').replace(/\\.md$/i, '');\n      if (rel.match(/\\/index$/i)) {\n        slug = rel.replace(/\\/index$/i, '');\n      } else {\n        slug = rel;\n      }\n      slug = slug.replace(/^\\/+|\\/+$/g, '');\n    }\n    return slug;\n  }\n\n  const root: any = { children: new Map() };\n\n  nodes.forEach((node: any) => {\n    const slug = computeSlug(node);\n    const parts = slug === '' ? [] : slug.split('/').filter(Boolean);\n    let cursor = root;\n      parts.forEach((part: string, idx: number) => {\n      if (!cursor.children.has(part)) {\n        cursor.children.set(part, { name: part, children: new Map() });\n      }\n      cursor = cursor.children.get(part);\n      if (idx === parts.length - 1) {\n        const title = node.title || node.frontmatter?.title || node.frontmatter?.slug || part;\n        cursor.title = title;\n        cursor.excerpt = node.excerpt || null;\n        cursor.date = node.date || node.frontmatter?.date || null;\n        const path = `${docBase(language)}${slug === '' ? '' : '/' + slug}`;\n        cursor.path = path;\n      }\n    });\n    if (parts.length === 0) {\n      root.title = node.title || node.frontmatter?.title || 'Index';\n      root.path = `${docBase(language)}`;\n    }\n  });\n\n  function nodeContainsActive(node: any): boolean {\n    if (!activePath) return false;\n    const normalize = (p: any) => String(p || '').replace(/\\/+$|^\\s+|\\s+$/g, '').replace(/\\/$/, '');\n    if (node.path && normalize(node.path) === normalize(activePath)) return true;\n    const children = Array.from(node.children ? node.children.values() : []);\n    return children.some((c: any) => nodeContainsActive(c));\n  }\n\n  function renderTree(node: any, prefix = ''): any {\n    const items: any[] = [];\n    if (node.title && node.path) {\n      const normalize = (p: any) => String(p || '').replace(/\\/+$|^\\s+|\\s+$/g, '').replace(/\\/$/, '');\n      const isActive = activePath && normalize(node.path) === normalize(activePath);\n      const activeBg = isActive ? 'bg-brand/10 dark:bg-brand-700 dark:text-white ring-2 ring-brand' : '';\n      items.push(\n        <li key={node.path} className=\"py-2\">\n          <a\n            href={node.path}\n            className={`block p-3 border border-gray-200 rounded-md shadow-sm transform transition-transform duration-150 ease-out hover:-translate-y-0.5 hover:shadow-md ${activeBg}`}\n          >\n            <div className={`font-medium ${isActive ? 'text-brand' : 'text-theme'}`}>{node.title}</div>\n            <div className=\"text-xs text-gray-400 mt-1\">{node.date ? new Date(node.date).toLocaleDateString() : undatedLabel}</div>\n          </a>\n        </li>\n      );\n    }\n    const children = Array.from(node.children ? node.children.values() : []);\n    children.sort((a: any, b: any) => {\n      const da = a.date ? new Date(a.date).getTime() : null;\n      const db = b.date ? new Date(b.date).getTime() : null;\n      if (da && db) return db - da; // newest first\n      if (da && !db) return -1;\n      if (!da && db) return 1;\n      return a.name.localeCompare(b.name);\n    });\n    children.forEach((child: any) => {\n      const childKey = `${prefix}/${child.name}`;\n      const hasChildren = child.children && child.children.size > 0;\n      if (hasChildren) {\n        const open = nodeContainsActive(child);\n        items.push(\n          <li key={childKey} className=\"py-1\">\n            <details open={open}>\n              <summary className=\"cursor-pointer font-medium\">{child.name}</summary>\n              <ul className=\"pl-4 mt-2\">\n                {renderTree(child, childKey)}\n              </ul>\n            </details>\n          </li>\n        );\n      } else {\n        const title = child.title || child.name;\n        const path = child.path || `${docBase(language)}/${[...childKey.split('/').filter(Boolean)].join('/')}`;\n        const normalize = (p: any) => String(p || '').replace(/\\/+$|^\\s+|\\s+$/g, '').replace(/\\/$/, '');\n        const isActive = activePath && normalize(path) === normalize(activePath);\n        const activeBg = isActive ? 'bg-brand/10 dark:bg-brand-700 dark:text-white ring-2 ring-brand' : '';\n        items.push(\n          <li key={childKey} className=\"py-2\">\n            <a\n              href={path}\n              className={`block p-3 border border-gray-200 rounded-md shadow-sm transform transition-transform duration-150 ease-out hover:-translate-y-0.5 hover:shadow-md ${activeBg}`}\n            >\n              <div className={`${isActive ? 'text-brand font-medium' : 'font-medium'}`}>{title}</div>\n              <div className=\"text-xs text-gray-400 mt-1\">{child.date ? new Date(child.date).toLocaleDateString() : undatedLabel}</div>\n            </a>\n          </li>\n        );\n      }\n    });\n    return items;\n  }\n\n  return (\n    <nav>\n      <div className=\"mb-3\">\n        {showBack ? (\n          <a href={`/${language}/${docPrefix}/`} className=\"inline-flex items-center text-sm font-semibold text-gray-700 hover:text-brand\">\n            <span className=\"mr-2\">←</span>\n            <span>{backLabel}</span>\n          </a>\n        ) : (\n          root.path ? (\n            <a href={root.path} className=\"inline-flex items-center text-sm font-semibold text-gray-700 hover:text-brand\">\n              ← <span className=\"ml-2\">{root.title || indexLabel}</span>\n            </a>\n          ) : null\n        )}\n      </div>\n      <ul className=\"space-y-2\">\n        {renderTree(root)}\n      </ul>\n    </nav>\n  );\n}\n\nexport default DocSidebar;\n"],"names":["_ref","_pageContext$i18n2","_pageContext$i18n4","_pageContext$i18n5","_pageContext$i18n6","data","pageContext","location","html","markdownRemark","fmTitle","frontmatter","title","m","match","replace","trim","e","slug","parts","String","split","filter","Boolean","length","i18n","useTranslation","useEffect","_pageContext$i18n","langFromContext","language","changeLanguage","nodes","React","_pageContext$i18n3","list","docPages","lang","p","map","id","path","date","activePath","pathname","originalPath","Layout","pageProps","SeoHead","undefined","className","DocSidebar","docPrefix","showBack","dangerouslySetInnerHTML","__html","_data$site","_data$site$siteMetada","description","useStaticQuery","siteTitle","site","siteMetadata","siteUrl","process","SITE_URL","fullTitle","url","URL","href","name","content","property","docBase","t","indexLabel","backLabel","undatedLabel","root","children","Map","nodeContainsActive","node","normalize","Array","from","values","some","c","forEach","_node$frontmatter","RegExp","parent","absolutePath","rel","isArray","pop","computeSlug","cursor","_node$frontmatter5","part","idx","has","set","get","_node$frontmatter2","_node$frontmatter3","_node$frontmatter4","excerpt","renderTree","prefix","items","isActive","activeBg","push","key","Date","toLocaleDateString","sort","a","b","da","getTime","db","localeCompare","child","childKey","size","open","_toConsumableArray","join"],"sourceRoot":""}