{"version":3,"file":"component---src-templates-blog-index-tsx-42b19b89d14a2435bc66.js","mappings":"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","sources":["webpack://discuz-fly-site/./src/templates/BlogIndex.tsx","webpack://discuz-fly-site/./src/components/SeoHead.tsx"],"sourcesContent":["import React, { useMemo, useState, useEffect } from 'react'\nimport { useTranslation } from 'gatsby-plugin-react-i18next'\nconst enTranslations = require('../locales/en/translation.json')\nconst zhTranslations = require('../locales/zh/translation.json')\nimport Layout from '../components/Layout'\nimport SeoHead from '../components/SeoHead'\nimport { Link, navigate, graphql } from 'gatsby'\n\nconst PAGE_SIZE = 5\n\nconst BlogIndex: React.FC<any> = (props) => {\n  const pageContext = props.pageContext || {}\n  const rawPosts = pageContext?.posts || []\n\n  // Normalize posts and parse dates\n  const posts = useMemo(() => {\n    return rawPosts.map((p: any) => {\n      const fm = p.frontmatter || {}\n      const title = fm.title || p.relativePath\n      const slug = (fm.slug || p.relativePath || '').replace(/\\.md$|\\.markdown$/i, '').replace(/^\\/+|\\/+$/g, '')\n      const date = fm.date ? new Date(fm.date) : null\n      const excerpt = fm.excerpt || ''\n      const tags = Array.isArray(fm.tags) ? fm.tags.map(String) : []\n      const dateTs = date ? date.getTime() : null\n      return { id: p.id || slug, title, slug, date, dateTs, excerpt, tags }\n    }).sort((a: any, b: any) => {\n      // newest first; null dates go last\n      if (!a.dateTs && !b.dateTs) return 0\n      if (!a.dateTs) return 1\n      if (!b.dateTs) return -1\n      return b.dateTs - a.dateTs\n    })\n  }, [rawPosts])\n\n  const { t, i18n } = useTranslation()\n  const effectiveLang = pageContext?.i18n?.language || (i18n && i18n.language) || 'en'\n  const defaultLang = pageContext?.i18n?.defaultLanguage || 'en'\n  const langPrefix = effectiveLang && effectiveLang !== defaultLang ? `/${effectiveLang}` : ''\n  const raw = { en: enTranslations, zh: zhTranslations }\n  const tFallback = (key: string, opts?: any) => {\n    const v = raw[effectiveLang as 'en' | 'zh'] && raw[effectiveLang as 'en' | 'zh'][key]\n    if (v && typeof v === 'string') {\n      if (opts) {\n        return Object.keys(opts).reduce((s, k) => s.replace(new RegExp(`{{\\\\s*${k}\\\\s*}}`, 'g'), String(opts[k])), v)\n      }\n      return v\n    }\n    return key\n  }\n  const translate = (key: string, opts?: any) => {\n    try {\n      if (i18n && i18n.language) {\n        const res = t(key, { lng: effectiveLang, ...(opts || {}) })\n        if (typeof res === 'string' && res !== key) return res\n      }\n    } catch (e) {}\n    return tFallback(key, opts)\n  }\n\n  const allTags = useMemo(() => {\n    const s = new Set<string>()\n    posts.forEach((p: any) => p.tags.forEach((t: string) => s.add(t)))\n    return Array.from(s).sort()\n  }, [posts])\n\n  // Support reading selectedTag from pageContext (tag pages) and from URL query\n  const initialTag = pageContext?.selectedTag || null\n  const [selectedTag, setSelectedTag] = useState<string | null>(initialTag)\n\n  // page state synchronized with ?page=<n> and can be seeded from pageContext (SSR)\n  const getPageFromUrl = () => {\n    try {\n      const qp = new URLSearchParams(typeof window !== 'undefined' ? window.location.search : '')\n      const p = parseInt(qp.get('page') || String(pageContext?.currentPage || '1'), 10)\n      return Number.isFinite(p) && p > 0 ? p : 1\n    } catch (e) { return Number(pageContext?.currentPage || 1) }\n  }\n  const [page, setPage] = useState(Number(pageContext?.currentPage || getPageFromUrl()))\n\n  // keep URL in sync when page or tag changes (only perform string ops; avoid constructing URL object repeatedly)\n  useEffect(() => {\n    try {\n      const basePath = selectedTag ? `${langPrefix}/blog/tag/${String(selectedTag).toLowerCase().replace(/[^a-z0-9]+/g, '-')}/` : `${langPrefix}/blog/`;\n      const search = (page && page > 1) ? `?page=${page}` : '';\n      const newPath = basePath + search;\n      window.history.replaceState({}, '', newPath);\n    } catch (e) {}\n  }, [selectedTag, page, langPrefix])\n\n  const filtered = useMemo(() => {\n    const f = selectedTag ? posts.filter((p: any) => p.tags.includes(selectedTag)) : posts\n    return f\n  }, [posts, selectedTag])\n\n  const totalPages = Math.max(1, Math.ceil(filtered.length / PAGE_SIZE))\n  const current = Math.min(Math.max(1, page), totalPages)\n  const start = (current - 1) * PAGE_SIZE\n  const paged = filtered.slice(start, start + PAGE_SIZE)\n\n  function gotoPage(n: number) {\n    const next = Math.max(1, Math.min(totalPages, n))\n    setPage(next)\n    window.scrollTo({ top: 0, behavior: 'smooth' })\n  }\n\n  // Memoize a DateTimeFormat instance per language to avoid recreating it on each render\n  const dateFormatter = useMemo(() => {\n    try {\n      return new Intl.DateTimeFormat(i18n.language || 'en', { year: 'numeric', month: '2-digit', day: '2-digit' })\n    } catch (e) {\n      return null\n    }\n  }, [i18n.language])\n\n  const fmtDate = (d: Date | null) => {\n    if (!d) return null\n    try {\n      return dateFormatter ? dateFormatter.format(d) : d.toISOString().slice(0,10)\n    } catch (e) { return d.toISOString().slice(0,10) }\n  }\n\n  return (\n    <Layout pageProps={props}>\n      <main className=\"max-w-4xl mx-auto py-12 px-4\">\n        <SeoHead title={String(translate('blog.title') || 'Blog')} lang={effectiveLang} />\n  <h1 className=\"text-3xl font-bold mb-6\">{String(translate('blog.title') || 'Blog')}</h1>\n\n        <div className=\"mb-6\">\n          <div className=\"flex items-center space-x-3 flex-wrap\">\n            <button\n              onClick={() => { setSelectedTag(null); setPage(1) }}\n              className={`px-3 py-1 rounded ${selectedTag === null ? 'bg-brand text-white' : 'bg-gray-100 text-gray-800 hover:bg-gray-200'}`}>\n              {String(translate('blog.all', { count: posts.length }))}\n            </button>\n            {allTags.map((t) => (\n              <button\n                key={t}\n                onClick={() => { setSelectedTag(t); setPage(1) }}\n                className={`px-3 py-1 rounded ${selectedTag === t ? 'bg-brand text-white' : 'bg-gray-100 text-gray-800 hover:bg-gray-200'}`}>\n                {t}\n              </button>\n            ))}\n          </div>\n        </div>\n\n  <div className=\"mb-4 text-sm text-gray-600\">{String(translate('blog.count', { count: filtered.length }))} — {String(translate('blog.page_of', { current, total: totalPages }))}</div>\n\n        <ul className=\"space-y-6\">\n          {paged.map((p: any) => (\n            <li\n              key={p.id}\n              role=\"link\"\n              tabIndex={0}\n              onClick={() => navigate(`${langPrefix}/blog/${p.slug}/`)}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                  e.preventDefault()\n                  navigate(`${langPrefix}/blog/${p.slug}/`)\n                }\n              }}\n              className=\"border rounded p-4 cursor-pointer transition-transform transform hover:-translate-y-1 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-brand\"\n            >\n              <h2 className=\"text-xl font-semibold mb-1\">\n                <Link to={`${langPrefix}/blog/${p.slug}/`} className=\"text-brand\">{p.title}</Link>\n              </h2>\n              {p.date ? <div className=\"text-sm text-gray-500 mb-2\">{fmtDate(p.date)}</div> : null}\n              {p.excerpt ? <p className=\"text-sm text-gray-700 mb-2\">{p.excerpt}</p> : null}\n              {p.tags && p.tags.length ? (\n                <div className=\"flex flex-wrap gap-2\">\n                  {p.tags.map((t: string) => (\n                    <button\n                      key={t}\n                      onClick={(e) => { e.stopPropagation(); setSelectedTag(t); setPage(1) }}\n                      className=\"text-sm px-2 py-1 bg-gray-100 rounded\"\n                    >\n                      {t}\n                    </button>\n                  ))}\n                </div>\n              ) : null}\n            </li>\n          ))}\n        </ul>\n\n        <div className=\"mt-6 flex items-center justify-between\">\n          <div>\n            <button onClick={() => gotoPage(page - 1)} disabled={page <= 1} className=\"px-3 py-1 rounded bg-gray-100 hover:bg-gray-200 disabled:opacity-50\">{String(translate('blog.previous') || 'Previous')}</button>\n            <button onClick={() => gotoPage(page + 1)} disabled={page >= totalPages} className=\"ml-2 px-3 py-1 rounded bg-gray-100 hover:bg-gray-200 disabled:opacity-50\">{String(translate('blog.next') || 'Next')}</button>\n          </div>\n          <div className=\"text-sm text-gray-600\">{String(translate('blog.showing_range', { start: start + 1, end: Math.min(start + PAGE_SIZE, filtered.length), total: filtered.length }))}</div>\n        </div>\n      </main>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const query = graphql`\n  query BlogIndexLocales($language: String!) {\n    locales: allLocale(filter: { language: { eq: $language } }) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n  }\n`\n","import * as React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\n\ntype Props = {\n  title?: string\n  description?: string\n  lang?: string\n  pathname?: string\n}\n\nconst SeoHead: React.FC<Props> = ({ title, description = '', lang = 'en', pathname }) => {\n  const data = useStaticQuery(graphql`\n    query SiteMetaForHead {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  const siteTitle = data?.site?.siteMetadata?.title || ''\n  const siteUrl = process.env.SITE_URL || ''\n  const fullTitle = title ? `${title} | ${siteTitle}` : siteTitle\n  let url = ''\n  try {\n    if (pathname) {\n      if (siteUrl) {\n        url = new URL(pathname, siteUrl).href\n      } else {\n        // fallback to using pathname as-is when no siteUrl is configured\n        url = pathname\n      }\n    } else {\n      url = siteUrl || ''\n    }\n  } catch (e) {\n    url = pathname || siteUrl || ''\n  }\n\n  return (\n    <>\n      <html lang={lang} />\n      <title>{fullTitle}</title>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={fullTitle} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:url\" content={url} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n    </>\n  )\n}\n\nexport default SeoHead\n"],"names":["enTranslations","require","zhTranslations","props","_pageContext$i18n","_pageContext$i18n2","pageContext","rawPosts","posts","useMemo","map","p","fm","frontmatter","title","relativePath","slug","replace","date","Date","excerpt","tags","Array","isArray","String","dateTs","getTime","id","sort","a","b","t","i18n","useTranslation","effectiveLang","language","defaultLang","defaultLanguage","langPrefix","raw","en","zh","translate","key","opts","res","Object","assign","lng","e","tFallback","v","keys","reduce","s","k","RegExp","allTags","Set","forEach","add","from","initialTag","selectedTag","setSelectedTag","useState","page","setPage","Number","currentPage","getPageFromUrl","qp","URLSearchParams","window","location","search","parseInt","get","isFinite","useEffect","basePath","toLowerCase","newPath","history","replaceState","filtered","filter","includes","totalPages","Math","max","ceil","length","current","min","start","paged","slice","gotoPage","n","next","scrollTo","top","behavior","dateFormatter","Intl","DateTimeFormat","year","month","day","React","Layout","pageProps","className","SeoHead","lang","onClick","count","total","role","tabIndex","navigate","onKeyDown","preventDefault","Link","to","d","format","toISOString","fmtDate","stopPropagation","disabled","end","_ref","_data$site","_data$site$siteMetada","description","pathname","data","useStaticQuery","siteTitle","site","siteMetadata","siteUrl","process","SITE_URL","fullTitle","url","URL","href","name","content","property"],"sourceRoot":""}